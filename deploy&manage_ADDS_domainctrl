Powershell
---------
- much more powerful command line environment than what we had prior to that, 
which was just called Command Prompt, which was originally DOS and Microsoft.
- you can really speed up the process of server administration, client administration, 
cloud administration
- you can write scripts, you can automate things.

So for example, if I wanted to see what services are running on this 
machine right now, I could type
# get-service

Now, before I hit enter, I also want to point out that PowerShell supports what's called 
IntelliSense which means that it can try to detect what it is you're typing.
And I can tab through just continuously hit tab until I find the command I'm looking for.

# get-service  >>>
And you're going to be able to see the different services that are running  
right now on the machine

Uh, now if I want to modify one of those services, I can change the verb, right.
So for example, there is a service right now called the Winrm service, which is a pretty important
service for PowerShell because this is what is known as Windows Remote Management.
This is actually what PowerShell uses when it wants to remote into another machine, actually that service.
It's more important for that service to be running on the destination machine you're connecting into
than the source machine.

But notice that that service is running right now.
So let's say I wanted to stop the service right now.

# stop-service -Name "winrm"

I'm going to use a command called to get more info about the command
Get-help stop-service

And just like that the Winterim service now should be stopped.

# start-service -Name "winrm"

see the processes running on windows
# get-process 

If I wanted to see what the 5 newest event logs are doing in windows  
# get-eventlog -LogName System -Newest 5

So what I can do is I can change the formatting with PowerShell, 
I can use what's known as the pipe command.
And so piping is going to take the the output from one command.
And it's going to attach it to the input of another command.

# get-eventlog -LogName System -Newest 5 | format-list
So right now this is formatted as a list after the specification

output redirection
# get-eventlog -LogName System -Newest 5 | format-list | out-file C:\log.txt

So the other thing about PowerShell, sometimes the trick to PowerShell is
just figuring out what command you're looking for that you, you're trying to perform.
Um, so for example, let's say I'm trying to perform a command that's got 
the word net in it and I can't remember the command.
So what I can do is I can type get- command, you can hit enter.
And then from there you're going to see every single commandlet that's 
in memory right now.

So let me show you how we can narrow down the command.
So let's say I'm trying to find a command that has the word net.
So what I'm going to do is I'm going to use a wildcard.

# get-command -name *net*

there's every command that has the word net 
And we're going to put the word reset in there.

# get-command -name *net* -verb reset

So the other thing about, uh, about working with PowerShell is that 
PowerShell uses these things called modules.
Modules load more commands in memory.

You got to understand that there are hundreds of thousands of commands

Show the current modules that are stored in in memor:
# Get-Module

So if I am uh, if I am wanting to run certain commands, I need to have the 
modules loaded in memory, for example, Active Directory.

# import-module -name activedirectory

So Microsoft has this thing called the PowerShell gallery.
We can install scripts:
# install-script -name get-windowsautopilotinfo
It's going to grab something called the device information off a machine, 
the hardware ID of your computer.

So to download scripts it's going to create a path variable.
The path variable is going to be the place where scripts are stored.
So it's going to go ahead and create that that location on your hard drive 
to store scripts so that it can run scripts.
Um, so from there it's going to ask you if you want to install NuGet.

NuGet is the software that's going to let you download scripts from the 
internet. So we're just going to go ahead and say yes to that.
The PowerShell gallery is an untrusted repository.
Oddly enough, Microsoft owns the repository, but it's an untrusted repository.
And the reason it's an untrusted repository is because it's a community repository.
It's not just, just Microsoft people that that upload scripts there.

the community, other people can upload scripts as well, although 
they do have good moderators that generally make sure there's nothing bad 
that gets uploaded.

The script should be available.
# get-windowsautopilotinfo.ps1
===================================================================
Domains, trees and forests
-------------------------
every single Active Directory domain must be part of a forest.
There is no way possible for a domain to not be part of a domain, to not be part of a forest.

a group of domains make up a tree, and then a group of trees to make a forest
With this this single triangle here, single triangle is going to represent, uh, my exam lab practice
The company is just starting up, it's a single domain.
So the question now would be why would you move into having multiple domains.

Uh, one reason would be um, administrative purposes because your company is spread out through large
amounts of geographical locations.
For example, my exam lab practice comm, part of my company might be based in the United States.
Maybe that's where the company got started and the company is expanding and growing.

But when you do that, when it becomes what's known as a child domain, because it's going to be underneath
this exam lab practice name, it's going to be called UK dot exam lab practice.com.

They'll have these lines here that are going to represent what are known as trust relationships.
Trust relationships allow our domains to share resources together.
These domains here can all exchange and share resources.

We have domain admins, exam lab practice com that can only control exam lab practice com although we
can have what are called enterprise administrators that can control the whole thing okay.
Child domains can even have other child domains.

The schema is part of the Active Directory database that makes up all of the different objects, all
the different attributes.
These are the object templates and attributes and all of that.
But basically this involves the actual database itself.

Now the other thing that that, uh, domains that are part of the same forest will share is they'll
share this thing called the global catalog.
The global catalog is a part of the Active Directory database that if you're part of the same forest,
you share all the global catalog.
And this is part of what allows domains to search for objects in different domains.

So for example, if if I'm in Scotland and I'm trying to look up somebody's user information over in
Australia, I could do that, especially if I needed their contact information or something
like that, because of this thing called the global catalog that shared across the entire forest.

The very first domain in the forest is called the root of the forest.
This is where your enterprise admins are usually created.
Enterprise admins have control over the entire forest or as domain admins.
Our user accounts that only have admin rights over just their individual domains.

To create the KDS root key, run the following command from the Active Directory Module for Windows PowerShell on a Windows Server domain controller
Add-KdsRootKey –EffectiveImmediately

You create group managed service accounts by using New-ADServiceAccount Windows PowerShell cmdlet with the –PrinicipalsAllowedToRetrieveManagedPassword parameter.
New-ADServiceAccount -Name LondonSQLFarm -PrincipalsAllowedToRetrieveManagedPassword SEA-SQL1, SEA-SQL2, SEA-SQL3

The syntax for transferring a role and seizing a role is similar within Windows PowerShell, as the following syntax line demonstrates:
Move-ADDirectoryServerOperationsMasterRole -Identity "<servername>" -OperationsMasterRole "<rolenamelist>" -Force

The main steps in the process are:

Create AD DS environment. Create a single domain AD DS forest containing two domain controllers.
Check the placement of operations master roles. Identify which of the two domain controllers hosts the operations master roles.
Transfer operations master roles between domain controllers by using the GUI tools. Use the GUI tools to transfer the operations masters roles from the domain controller you identified in the previous step to the other one.
Transfer operations master roles between domain controllers by using command-line tools. Use the command-line tools to transfer the operations masters roles back to the first domain controller.

> netdom query fsmo 
> regsvr32 schmmgmt.dll
> mmc

PS C:\Users\CTudose> ntdsutil
C:\Windows\system32\ntdsutil.exe: roles
fsmo maintenance: connections
server connections: connect to server X
Bindind to X ...
Connected to X using credentials of locally loggerd on user
fsmo maintenance: transfer schema master
fsmo maintenance: transfer naming master
fsmo maintenance: transfer RID master
fsmo maintenance: transfer infrastructure master
