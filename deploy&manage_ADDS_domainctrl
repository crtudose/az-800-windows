Powershell
---------
- much more powerful command line environment than what we had prior to that, 
which was just called Command Prompt, which was originally DOS and Microsoft.
- you can really speed up the process of server administration, client administration, 
cloud administration
- you can write scripts, you can automate things.

So for example, if I wanted to see what services are running on this 
machine right now, I could type
# get-service

Now, before I hit enter, I also want to point out that PowerShell supports what's called 
IntelliSense which means that it can try to detect what it is you're typing.
And I can tab through just continuously hit tab until I find the command I'm looking for.

# get-service  >>>
And you're going to be able to see the different services that are running  
right now on the machine

Uh, now if I want to modify one of those services, I can change the verb, right.
So for example, there is a service right now called the Winrm service, which is a pretty important
service for PowerShell because this is what is known as Windows Remote Management.
This is actually what PowerShell uses when it wants to remote into another machine, actually that service.
It's more important for that service to be running on the destination machine you're connecting into
than the source machine.

But notice that that service is running right now.
So let's say I wanted to stop the service right now.

# stop-service -Name "winrm"

I'm going to use a command called to get more info about the command
Get-help stop-service

And just like that the Winterim service now should be stopped.

# start-service -Name "winrm"

see the processes running on windows
# get-process 

If I wanted to see what the 5 newest event logs are doing in windows  
# get-eventlog -LogName System -Newest 5

So what I can do is I can change the formatting with PowerShell, 
I can use what's known as the pipe command.
And so piping is going to take the the output from one command.
And it's going to attach it to the input of another command.

# get-eventlog -LogName System -Newest 5 | format-list
So right now this is formatted as a list after the specification

output redirection
# get-eventlog -LogName System -Newest 5 | format-list | out-file C:\log.txt

So the other thing about PowerShell, sometimes the trick to PowerShell is
just figuring out what command you're looking for that you, you're trying to perform.
Um, so for example, let's say I'm trying to perform a command that's got 
the word net in it and I can't remember the command.
So what I can do is I can type get- command, you can hit enter.
And then from there you're going to see every single commandlet that's 
in memory right now.

So let me show you how we can narrow down the command.
So let's say I'm trying to find a command that has the word net.
So what I'm going to do is I'm going to use a wildcard.

# get-command -name *net*

there's every command that has the word net 
And we're going to put the word reset in there.

# get-command -name *net* -verb reset

So the other thing about, uh, about working with PowerShell is that 
PowerShell uses these things called modules.
Modules load more commands in memory.

You got to understand that there are hundreds of thousands of commands

Show the current modules that are stored in in memor:
# Get-Module

So if I am uh, if I am wanting to run certain commands, I need to have the 
modules loaded in memory, for example, Active Directory.

# import-module -name activedirectory

So Microsoft has this thing called the PowerShell gallery.
We can install scripts:
# install-script -name get-windowsautopilotinfo
It's going to grab something called the device information off a machine, 
the hardware ID of your computer.

So to download scripts it's going to create a path variable.
The path variable is going to be the place where scripts are stored.
So it's going to go ahead and create that that location on your hard drive 
to store scripts so that it can run scripts.
Um, so from there it's going to ask you if you want to install NuGet.

NuGet is the software that's going to let you download scripts from the 
internet. So we're just going to go ahead and say yes to that.
The PowerShell gallery is an untrusted repository.
Oddly enough, Microsoft owns the repository, but it's an untrusted repository.
And the reason it's an untrusted repository is because it's a community repository.
It's not just, just Microsoft people that that upload scripts there.

the community, other people can upload scripts as well, although 
they do have good moderators that generally make sure there's nothing bad 
that gets uploaded.

The script should be available.
I should be able to say 
# get-windowsautopilotinfo.ps1


